require-module plug

hook global InsertKey k %{ try %{
    execute-keys -draft hH <a-k>jk|Jk<ret> d # not sure what draft is but hH selects the 2 characters we typed. <a-k> matches the regex of jk or jK. then d deletes it
    execute-keys <esc>
}}
hook global InsertKey K %{ try %{
    execute-keys -draft hH <a-k>jK|JK<ret> d
    execute-keys <esc>
}}

hook global ModuleLoaded tmux %{
    alias global popup tmux-terminal-vertical
}

# Let plug.kak manage itself.
plug plug https://github.com/alexherbo2/plug.kak %{
  # Upgrade plugins
  # Install plugins and build them.
  define-command plug-upgrade -docstring 'plug-upgrade' %{
    plug-install
    plug-execute connect make install
    plug-execute lsp cargo build --release
  }
}

plug prelude https://github.com/alexherbo2/prelude.kak

plug connect https://github.com/alexherbo2/connect.kak %{
    require-module connect-lf
    require-module connect-fzf

    hook global RuntimeError "\d+:\d+: '\w+' (.*): is a directory" %{
        evaluate-commands %sh{
            directory=$kak_hook_param_capture_1
            echo lf $directory
        }
    }
    map global user h ": connect-terminal <ret>" -docstring "Spawn a connect terminal"

    declare-user-mode my-fzf-mode
    map global my-fzf-mode v ': fzf-files<ret>' -docstring 'use fzf mode stuff'
    map global my-fzf-mode b ': fzf-buffers<ret>' -docstring 'use fzf mode stuff'
    map global normal <c-p> ': enter-user-mode my-fzf-mode<ret>' -docstring 'enter my fzf mode'
}

map global normal ^ q
map global normal <a-^> Q
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>
declare-user-mode buffers
map global normal b ': enter-user-mode buffers<ret>' -docstring 'buffer controls'
map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'locked buffer controls mode'
map global buffers d ": delete-buffer<ret>" -docstring 'delete buffer'
map global buffers w ": w<ret>" -docstring 'save buffer'
map global buffers n ": buffer-next<ret>" -docstring 'next buffer'
map global buffers p ": buffer-previous<ret>" -docstring 'previous buffer'

# map global normal  ': comment-line<ret>' -docstring "<c-/> to comment/uncomment selection" # mapping <c-/> but can't type that directly so I typed <c-v><c-/> and that worked
# map global normal <c-/> ': comment-line<ret>' -docstring "<c-/> to comment/uncomment selection" # doesnt work
map global normal <c-_> ': comment-line<ret>' -docstring "<c-/> to comment/uncomment selection" # type ctrl-/ but map unit separator. they have the same keycode or some junk
map global user / ': comment-line<ret>' -docstring "[un]comment selection. until <c-/> is fixed"
map global normal <c-g> ': prompt grep: %{grep "%val{text}"}<ret>' #grep "a%val{text}"<ret>'
map global normal <c-n> ': grep-next-match<ret>'
map global normal <c-N> ': grep-previous-match<ret>'

set-option global grepcmd 'rg -n --column --smart-case'
add-highlighter global/ number-lines
add-highlighter global/ wrap
hook global InsertChar \t %{ execute-keys -draft -itersel h@ }
set global tabstop 4
set global indentwidth 4

map global normal = ' :prompt math: %{execute-keys "a%val{text}<lt>esc>|bc -l<lt>ret>"}<ret>'

declare-user-mode clipboard
map global user c ": enter-user-mode clipboard<ret>" -docstring 'send things to clipboard'
map global clipboard \% ": <esc>" -docstring 'send buffer to clipboard'
map global normal <c-x> '<a-|> xclip -selection clipboard<ret>: info "sent selection to clipboard"<ret>'

def line_numbering -docstring 'take selection and number the lines' %{
    execute-keys -draft <a-s>I<c-r>#.<space> 
    execute-keys <esc>
}

map global normal <c-l> ': line_numbering<ret>'

define-command -docstring "vsplit [<commands>]: split tmux horizontally |" vsplit -params .. -command-completion %{
    tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
}

define-command -docstring "hsplit [<commands>]: split tmux vertically -" hsplit -params .. -command-completion %{
    tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
}

define-command -docstring "tabnew [<commands>]: create new tmux window" tabnew -params .. -command-completion %{
    tmux-terminal-window kak -c %val{session} -e "%arg{@}"
}

map global user ] ': hsplit<ret>' -docstring "split tmux vertically"
map global user p ': hsplit<ret>' -docstring "split tmux vertically"
map global user <\> ': vsplit<ret>' -docstring "split tmux horizontally"
map global user <plus> ': tabnew<ret>' -docstring "create new tmux window"

def suspend-and-resume \
    -params 1..2 \
    -docstring 'suspend-and-resume <cli command> [<kak command after resume>]: backgrounds current kakoune client and runs specified cli command.  Upon exit of command the optional kak command is executed.' \
    %{ evaluate-commands %sh{

        # Note we are adding '&& fg' which resumes the kakoune client process after the cli command exits
        cli_cmd="$1 && fg"
        post_resume_cmd="$2"
            
        # automation is different platform to platform
        platform=$(uname -s)
        case $platform in
            Darwin)
                automate_cmd="sleep 0.01; osascript -e 'tell application \"System Events\" to keystroke \"$cli_cmd\\n\" '"
                kill_cmd="/bin/kill"
                break
                ;;
            Linux)
                automate_cmd="sleep 0.2; xdotool type '$cli_cmd'; xdotool key Return"
                kill_cmd="kill"
                break
                ;;
        esac

        # Uses platforms automation to schedule the typing of our cli command
        nohup sh -c "$automate_cmd"  > /dev/null 2>&1 &

        # Send kakoune client to the background
        $kill_cmd -TSTP $kak_client_pid
        
        # ...At this point the kakoune client is paused until the " && fg " gets run in the $automate_cmd

        # Upon resume, run the kak command is specified
        if [ ! -z "$post_resume_cmd" ]; then
            echo "$post_resume_cmd"
        fi
}}

def for-each-line \
    -docstring "for-each-line <command> <path to file>: run command with the value of each line in the file" \
    -params 2 \
    %{ evaluate-commands %sh{
        while read f; do
            printf "$1 $f\n"
        done < "$2"
}}

def toggle-ranger %{
    suspend-and-resume \
        "ranger --choosefiles=/tmp/ranger-files-%val{client_pid}" \
        "for-each-line edit /tmp/ranger-files-%val{client_pid}"
}

map global user r ': toggle-ranger<ret>' -docstring 'select files in ranger'

declare-user-mode git
map global git b ': git blame<ret>' -docstring 'git blame'
map global git h ': git hide-blame<ret>' -docstring 'git hide-blame'
map global user g ': enter-user-mode git<ret>' -docstring 'enter git mode'

hook global BufCreate .+\.pyx %{ set buffer filetype python }

def sarr \
    -docstring "sarr <search-term> <replace-term>: search and replace text through whole repo" \
    -params 2 \
    %{ evaluate-commands %sh{
        git grep -l "$1" | xargs sed -i "s/$1/$2/g"
}}

def sare \
    -docstring "sare <search-term> <replace-term>: search and replace text through all directories and subdirectories regardless of repo. BE CAREFUL!!" \
    -params 2 \
    %{ evaluate-commands %sh{
        grep -l "$1" | xargs sed -i "s/$1/$2/g"
}}

map global user s ': sarr ' -docstring 'search and replace through whole repo'

declare-user-mode tabcontrol
def set-tabs \
    -docstring "set-tabs <scope> <size>: set tab and indent to <size>" \
    -params 2 \
    %{ evaluate-commands %{
        set-option %arg{1} tabstop %arg{2}
        set-option %arg{1} indentwidth %arg{2}
    }
}

def convert-tabs-to-space \
    -docstring "convert tabs in selection to spaces" \
    %{ execute-keys %@
}

def convert-spaces-to-tabs \
    -docstring "convert tabs to spaces. find all contiguous spaces = tabstop size and convert to tab" \
    %{
        evaluate-commands %{ set-register a %opt{tabstop} } # temporarily set tabstop length to register "a"
        # should get us groups for every match that should have been a tab.
        # s = select
        # ^ = beginning of line
        # ( = group start
        # ?: = dont save group
        # [ = start of possible match characters
        # <space> = match spaces
        # ] = end potential character matches
        # { = start a quantifier
        # <c-r> = press control "r" to bring up regisers
        # a = use a register which currently has tabstop length
        # } = end quantifier
        # ) = end group
        # <ret> = hit return
        execute-keys s^(?:[<space>]{<c-r>a})+<ret>
        # from the previous selection grab every tab candidate
        # s = select
        # ( = group start
        # ?: = dont save group
        # [ = start of possible match characters
        # <space> = match spaces
        # ] = end potential character matches
        # { = start a quantifier
        # <c-r> = press control "r" to bring up regisers
        # a = use a register which currently has tabstop length
        # } = end quantifier
        # ) = end group
        # <ret> = hit return
        execute-keys s(?:[<space>]{<c-r>a})<ret>
        execute-keys c<tab><esc><space> # replace with 4 spaces
}

map global tabcontrol b ': set-tabs' -docstring 'set tabs and indent width'
map global tabcontrol s ': convert-tabs-to-space<ret>' -docstring 'convert all tabs to spaces'
map global tabcontrol t ': convert-spaces-to-tabs<ret>' -docstring 'convert selection from spaces to tabs'
map global user t ': enter-user-mode tabcontrol<ret>' -docstring "tabulation utils"

# instructions for compiling kakoune from source
# needs a c++20 compliant compiler currently
# install libstdc++-10, gcc-10, g++-10
# >> sudo apt install libstdc++-10-dev gcc-10 g++-10
# >> cd kakoune/src
# >> export CXX=g++-10
# >> make

# instructions for linking this file to the required one in ~/.config/kak/kakrc
# create a symlink
# ln -s ~/Configs/.config/kak/kakrc ~/.config/kak/kakrc
# that should keep the two files in sync
