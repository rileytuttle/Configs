source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/fzf.kak"
# plug "Deplouite/kakoune-buffers/buffers.kak"
# plug "alexherbo2/auto-pairs.kak"
map global normal <c-p> ': fzf-mode<ret>'
hook global InsertKey k %{ try %{
    exec -draft hH <a-k>jk|Jk<ret> d # not sure what draft is but hH selects the 2 characters we typed. <a-k> matches the regex of jk or jK. then d deletes it
    exec <esc>
}}
hook global InsertKey K %{ try %{
    exec -draft hH <a-k>jK|JK<ret> d
    exec <esc>
}}
hook global InsertKey j %{ try %{
    exec -draft hH <a-k>kj|Kj<ret> d
    exec <esc>
}}
hook global InsertKey J %{ try %{
    exec -draft hH <a-k>kJ|KJ<ret> d
    exec <esc>
}}

map global normal  ': comment-line<ret>' -docstring "<c-/> to comment/uncomment selection" # mapping <c-/> but can't type that directly so I typed <c-v><c-/> and that worked
map global normal <c-g> ': prompt grep: %{grep "%val{text}"}<ret>' #grep "a%val{text}"<ret>'
map global normal <c-n> ': grep-next-match<ret>'
map global normal <c-N> ': grep-previous-match<ret>'


# set-option global grepcmd 'rg -n --column --smart-case --context 5'
set-option global grepcmd 'rg -n --column --smart-case'
add-highlighter global/ number-lines
add-highlighter global/ wrap
hook global InsertChar \t %{ exec -draft -itersel h@ }
set global tabstop 4
set global indentwidth 4

map global normal = ' :prompt math: %{exec "a%val{text}<lt>esc>|bc -l<lt>ret>"}<ret>'


hook global NormalKey y|d|c %{ nop %sh{
    printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
}}

def line_numbering -docstring 'take selection and number the lines' %{
    exec -draft <a-s>I<c-r>#. 
    exec <esc>
}

map global normal <c-l> ': line_numbering<ret>'


# def list-register -docstring 'populate the *registers* buffer with the content of registers' %{
#     edit! -scratch *registers*
#     evaluate-commands %sh{
#         # empty scratch buffer
#         echo 'exec \%d'
                    
#         # paste the content of each register on a separate line
        # for reg in {'%','.','#','"','@','/','^','|',{a..z},{0..9}}; do
#         for reg in 'k' #{a..z}; do
#             echo "exec 'i${reg}<space><esc> '" #\"${reg}pGj<a-j>o<esc>'"
#         done

#         # hide empty registers (lines with less than 4 chars)
#         # echo 'exec \%<a-s><a-K>.{4,}<ret>d<space>'

#         # make sure all registers are easily visible
#         # echo 'exec gg'
#     }
# }

# # beware, it wipes the content of reg x
# def info-register -docstring 'populate an info box with the content of registers' %{
#     list-register
#     exec -save-regs \%| '%<a-s>|cut<space>-c-30<ret>%"xyga'
#     info -title registers -- %reg{x}
#     set-register x ''
# }
